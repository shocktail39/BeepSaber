diff --git a/game/BeepSaber_Game.gd b/game/BeepSaber_Game.gd
index c0e7e1c..f189bbd 100644
--- a/game/BeepSaber_Game.gd
+++ b/game/BeepSaber_Game.gd
@@ -14,6 +14,7 @@ var gamestate_playing := GameStatePlaying.new()
 var gamestate_settings := GameStateSettings.new()
 var gamestate: GameState = gamestate_bootup
 
+@onready var xr_origin := $XROrigin3D as XROrigin3D
 @onready var left_controller := $XROrigin3D/LeftController as BeepSaberController
 @onready var right_controller := $XROrigin3D/RightController as BeepSaberController
 @onready var left_saber := $XROrigin3D/LeftController/LeftLightSaber as LightSaber
@@ -48,6 +49,7 @@ var gamestate: GameState = gamestate_bootup
 @onready var cube_template := preload("res://game/BeepCube/BeepCube.tscn").instantiate() as BeepCube
 
 @onready var track := $Track as Node3D
+@onready var standing_ground := $StandingGround as Floor
 
 @onready var song_player := $SongPlayer as AudioStreamPlayer
 
@@ -80,7 +82,8 @@ func start_map(info: MapInfo, map_difficulty: DifficultyInfo) -> void:
 	if not Map.load_beatmap(info, map_difficulty, map_data):
 		return
 	
-	update_colors(Map.color_left, Map.color_right)
+	update_left_color(Map.color_left)
+	update_right_color(Map.color_right)
 	if Map.event_stack.is_empty():
 		event_driver.set_all_on(Map.color_left, Map.color_right)
 	else:
@@ -160,7 +163,6 @@ func _physics_process(_dt: float) -> void:
 	_check_and_update_saber(right_controller, right_saber)
 
 func _ready() -> void:
-	var xr_origin := $XROrigin3D as XROrigin3D
 	var xr_camera := $XROrigin3D/XRCamera3D as XRCamera3D
 	vr.initialize(
 		xr_origin,
@@ -176,6 +178,8 @@ func _ready() -> void:
 	if not vr.inVR:
 		xr_origin.add_child(preload("res://OQ_Toolkit/OQ_ARVROrigin/Feature_VRSimulator.tscn").instantiate())
 	
+	Settings.changed.connect(on_settings_changed)
+	
 	UI_AudioEngine.attach_children(highscore_keyboard)
 	UI_AudioEngine.attach_children(online_search_keyboard)
 	
@@ -191,19 +195,50 @@ func _ready() -> void:
 	await get_tree().process_frame
 	($pre_renderer as Node3D).queue_free()
 
+func on_settings_changed(key: StringName, value: Variant) -> void:
+	match key:
+		&"color_left":
+			if value is Color:
+				@warning_ignore("unsafe_cast")
+				update_left_color(value as Color)
+		&"color_right":
+			if value is Color:
+				@warning_ignore("unsafe_cast")
+				update_right_color(value as Color)
+		&"events":
+			if value is bool:
+				@warning_ignore("unsafe_cast")
+				disable_events(not (value as bool))
+		&"show_fps":
+			if value is bool:
+				@warning_ignore("unsafe_cast")
+				fps_label.visible = value as bool
+		&"glare":
+			if value is bool:
+				@warning_ignore("unsafe_cast")
+				($WorldEnvironment as WorldEnvironment).environment.glow_enabled = value as bool
+		&"player_height_offset":
+			if value is float:
+				@warning_ignore("unsafe_cast")
+				xr_origin.transform.origin.y = value as float
+
 func set_colors_from_settings() -> void:
-	update_colors(Settings.color_left, Settings.color_right)
-
-func update_colors(left: Color, right: Color) -> void:
-	left_saber.set_color(left)
-	right_saber.set_color(right)
-	ChainLink.left_material.set_shader_parameter(&"color", left)
-	ChainLink.right_material.set_shader_parameter(&"color", right)
-	goggles_shader.set_shader_parameter(&"left_color", left)
-	goggles_shader.set_shader_parameter(&"right_color", right)
-	#also updates map colors
-	event_driver.update_colors(left, right)
-	($StandingGround as Floor).update_colors(left, right)
+	update_left_color(Settings.color_left)
+	update_right_color(Settings.color_right)
+
+func update_left_color(color: Color) -> void:
+	left_saber.set_color(color)
+	ChainLink.left_material.set_shader_parameter(&"color", color)
+	goggles_shader.set_shader_parameter(&"left_color", color)
+	event_driver.update_left_color(color)
+	standing_ground.update_left_color(color)
+
+func update_right_color(color: Color) -> void:
+	right_saber.set_color(color)
+	ChainLink.right_material.set_shader_parameter(&"color", color)
+	goggles_shader.set_shader_parameter(&"right_color", color)
+	event_driver.update_right_color(color)
+	standing_ground.update_right_color(color)
 
 func disable_events(disabled: bool) -> void:
 	event_driver.disabled = disabled
diff --git a/game/BeepSaber_Game.tscn b/game/BeepSaber_Game.tscn
index 0a327bf..9e1ddfe 100644
--- a/game/BeepSaber_Game.tscn
+++ b/game/BeepSaber_Game.tscn
@@ -206,13 +206,8 @@ font_size_multiplier = 4.587
 transform = Transform3D(2.3178, 0, 0, 0, 2.3178, 0, 0, 0, 2.3178, 0, 1.5, -1)
 visible = false
 
-[node name="settings_Panel" parent="Settings_canvas" node_paths=PackedStringArray("game", "left_saber_ref", "right_saber_ref", "environment_ref", "player_ref", "spectator_window_ref") instance=ExtResource("19")]
-game = NodePath("../..")
-left_saber_ref = NodePath("../../XROrigin3D/LeftController/LeftLightSaber")
-right_saber_ref = NodePath("../../XROrigin3D/RightController/RightLightSaber")
-environment_ref = NodePath("../../WorldEnvironment")
+[node name="settings_Panel" parent="Settings_canvas" node_paths=PackedStringArray("player_ref") instance=ExtResource("19")]
 player_ref = NodePath("../../XROrigin3D")
-spectator_window_ref = NodePath("../../SpectatorWindow")
 
 [node name="OQ_UI2DLogWindow" parent="Settings_canvas" instance=ExtResource("31")]
 transform = Transform3D(0.373265, 0, 0, 0, 0.323257, 0.186633, 0, -0.186633, 0.323257, 0, -0.407229, 0.0410669)
diff --git a/game/LightSaber.gd b/game/LightSaber.gd
index 8ada77e..43a6657 100644
--- a/game/LightSaber.gd
+++ b/game/LightSaber.gd
@@ -40,14 +40,47 @@ func _hide() -> void:
 		_anim.play(&"Hide")
 		saber_visual._hide()
 
-func set_thickness(value: float) -> void:
-	saber_visual.set_thickness(value)
-
 func set_color(color: Color) -> void:
 	saber_visual.set_color(color)
-	
-func set_trail(enabled: bool = true) -> void:
-	saber_visual.set_trail(enabled)
+
+func on_settings_changed(key: StringName, value: Variant) -> void:
+	match key:
+		&"color_left":
+			if type == 0 and value is Color:
+				@warning_ignore("unsafe_cast")
+				saber_visual.set_color(value as Color)
+		&"color_right":
+			if type == 1 and value is Color:
+				@warning_ignore("unsafe_cast")
+				saber_visual.set_color(value as Color)
+		&"thickness":
+			if value is float:
+				@warning_ignore("unsafe_cast")
+				saber_visual.set_thickness(value as float)
+		&"saber_tail":
+			if value is bool:
+				@warning_ignore("unsafe_cast")
+				saber_visual.set_trail(value as bool)
+		&"saber_visual":
+			if value is int:
+				@warning_ignore("unsafe_cast")
+				set_saber(Settings.SABER_VISUALS[value as int][1])
+		&"left_saber_offset_pos":
+			if type == 0 and value is Vector3:
+				@warning_ignore("unsafe_cast")
+				extra_offset_pos = value as Vector3
+		&"right_saber_offset_pos":
+			if type == 1 and value is Vector3:
+				@warning_ignore("unsafe_cast")
+				extra_offset_pos = value as Vector3
+		&"left_saber_offset_rot":
+			if type == 0 and value is Vector3:
+				@warning_ignore("unsafe_cast")
+				extra_offset_rot = value as Vector3
+		&"right_saber_offset_rot":
+			if type == 1 and value is Vector3:
+				@warning_ignore("unsafe_cast")
+				extra_offset_rot = value as Vector3
 
 func _ready() -> void:
 	set_saber(Settings.SABER_VISUALS[Settings.saber_visual][1])
@@ -56,6 +89,9 @@ func _ready() -> void:
 	saber_visual.set_thickness(Settings.thickness * 0.01)
 	saber_visual.set_trail(Settings.saber_tail)
 	
+	@warning_ignore("return_value_discarded")
+	Settings.changed.connect(on_settings_changed)
+	
 	if type == 0:
 		_swing_cast._set_collision_mask_value(CollisionLayerConstants.LeftNote_bit, true)
 	else:
@@ -83,7 +119,10 @@ func set_saber(saber_path: String) -> void:
 		for i in $saber_holder.get_children():
 			i.queue_free()
 		saber_visual = newsaber as DefaultSaber
-		$saber_holder.add_child(newsaber)
+		$saber_holder.add_child(saber_visual)
+		saber_visual.set_color(Settings.color_right if type else Settings.color_left)
+		saber_visual.set_thickness(Settings.thickness)
+		saber_visual.set_trail(Settings.saber_tail)
 
 func set_swingcast_enabled(value: bool) -> void:
 	_swing_cast.set_raycasts_enabled(value)
@@ -107,8 +146,8 @@ func _handle_area_collided(area: Area3D) -> void:
 	var cutplane := Plane(o, saber_end, saber_end_past + Vector3(0, 0, BEAT_DISTANCE * Map.current_info.beats_per_minute * last_dt / 30)) # Account for relative position to track speed
 	note.cut(type, controller_speed, cutplane, controller)
 
-func _on_AnimationPlayer_animation_started(anim_name: StringName) -> void:
+func _on_AnimationPlayer_animation_started(_anim_name: StringName) -> void:
 	_swing_cast.adjust_segments = true
 
-func _on_AnimationPlayer_animation_finished(anim_name: StringName) -> void:
+func _on_AnimationPlayer_animation_finished(_anim_name: StringName) -> void:
 	_swing_cast.adjust_segments = false
diff --git a/game/Settings.gd b/game/Settings.gd
index 481ca2f..e4ef38c 100644
--- a/game/Settings.gd
+++ b/game/Settings.gd
@@ -10,92 +10,92 @@ var SABER_VISUALS: Array[PackedStringArray] = [
 	PackedStringArray(["Particle sword","res://game/sabers/particles/particles_saber.tscn"])
 ]
 
+signal changed(key: StringName, value: Variant)
+
 var thickness: float:
 	set(value):
 		thickness = value
-		config_set_value("thickness", value)
+		set_and_emit(&"thickness", value)
 var color_left: Color:
 	set(value):
 		color_left = value
-		config_set_value("color_left", value)
+		set_and_emit(&"color_left", value)
 var color_right: Color:
 	set(value):
 		color_right = value
-		config_set_value("color_right", value)
+		set_and_emit(&"color_right", value)
 var saber_visual: int:
 	set(value):
 		saber_visual = value
-		config_set_value("saber_visual", value)
+		set_and_emit(&"saber_visual", value)
 var ui_volume: float:
 	set(value):
 		ui_volume = value
-		config_set_value("ui_volume", value)
+		set_and_emit(&"ui_volume", value)
 var left_saber_offset_pos: Vector3:
 	set(value):
 		left_saber_offset_pos = value
-		config_set_value("left_saber_offset_pos", value)
+		set_and_emit(&"left_saber_offset_pos", value)
 var left_saber_offset_rot: Vector3:
 	set(value):
 		left_saber_offset_rot = value
-		config_set_value("left_saber_offset_rot", value)
+		set_and_emit(&"left_saber_offset_rot", value)
 var right_saber_offset_pos: Vector3:
 	set(value):
 		right_saber_offset_pos = value
-		config_set_value("right_saber_offset_pos", value)
+		set_and_emit(&"right_saber_offset_pos", value)
 var right_saber_offset_rot: Vector3:
 	set(value):
 		right_saber_offset_rot = value
-		config_set_value("right_saber_offset_rot", value)
+		set_and_emit(&"right_saber_offset_rot", value)
 var cube_cuts_falloff: bool:
 	set(value):
 		cube_cuts_falloff = value
-		config_set_value("cube_cuts_falloff", value)
+		set_and_emit(&"cube_cuts_falloff", value)
 var saber_tail: bool:
 	set(value):
 		saber_tail = value
-		config_set_value("saber_tail", value)
+		set_and_emit(&"saber_tail", value)
 var glare: bool:
 	set(value):
 		glare = value
-		config_set_value("glare", value)
+		set_and_emit(&"glare", value)
 var show_fps: bool:
 	set(value):
 		show_fps = value
-		config_set_value("show_fps", value)
+		set_and_emit(&"show_fps", value)
 var bombs_enabled: bool:
 	set(value):
 		bombs_enabled = value
-		config_set_value("bombs_enabled", value)
+		set_and_emit(&"bombs_enabled", value)
 var events: bool:
 	set(value):
 		events = value
-		config_set_value("events", value)
+		set_and_emit(&"events", value)
 var disable_map_color: bool:
 	set(value):
 		disable_map_color = value
-		config_set_value("disable_map_color", value)
+		set_and_emit(&"disable_map_color", value)
 var player_height_offset: float:
 	set(value):
 		player_height_offset = value
-		config_set_value("player_height_offset", value)
+		set_and_emit(&"player_height_offset", value)
 var audio_master: float:
 	set(value):
 		audio_master = value
-		config_set_value("audio_master", value)
+		set_and_emit(&"audio_master", value)
 var audio_music: float:
 	set(value):
 		audio_music = value
-		config_set_value("audio_music", value)
+		set_and_emit(&"audio_music", value)
 var audio_sfx: float:
 	set(value):
 		audio_sfx = value
-		config_set_value("audio_sfx", value)
+		set_and_emit(&"audio_sfx", value)
 var spectator_view: bool:
 	set(value):
 		spectator_view = value
-		config_set_value("spectator_view", value)
-
-
+		set_and_emit(&"spectator_view", value)
 
 func _ready() -> void:
 	if FileAccess.file_exists(CONFIG_PATH):
@@ -106,7 +106,6 @@ func _ready() -> void:
 		restore_defaults()
 		save()
 
-
 const default_values = {
 	thickness = 100.0,
 	cube_cuts_falloff = true,
@@ -135,8 +134,9 @@ func cast_or_default(key: String, to_type: int = -1) -> Variant:
 	var default = default_values[key] if key in default_values else null
 	return convert(config.get_value(SECTION, key, default), typeof(default) if to_type < 0 else to_type)
 
-func config_set_value(key: String, value: Variant) -> void:
-	config.set_value(SECTION, key, value if default_values[key] != value else null)
+func set_and_emit(key: StringName, value: Variant) -> void:
+	config.set_value(SECTION, String(key), value if default_values[key] != value else null)
+	changed.emit(key, value)
 
 # load() is the name of a built-in function,
 # so i went with the next best thing.
diff --git a/game/SpectatorWindow.gd b/game/SpectatorWindow.gd
index a2d7e38..4ff1adb 100644
--- a/game/SpectatorWindow.gd
+++ b/game/SpectatorWindow.gd
@@ -7,6 +7,13 @@ func _ready() -> void:
 	visibility_changed.connect(resize_to_main_window_size)
 	@warning_ignore("return_value_discarded")
 	close_requested.connect(close)
+	@warning_ignore("return_value_discarded")
+	Settings.changed.connect(on_settings_changed)
+
+func on_settings_changed(key: StringName, value: Variant) -> void:
+	if key == &"spectator_view" and value is bool:
+		@warning_ignore("unsafe_cast")
+		visible = value as bool
 
 func resize_to_main_window_size() -> void:
 	if visible:
diff --git a/game/event_driver.gd b/game/event_driver.gd
index b58cab2..32657e5 100644
--- a/game/event_driver.gd
+++ b/game/event_driver.gd
@@ -13,7 +13,6 @@ func _ready() -> void:
 		for im in range(5):
 			$Level/Sphere.material_override.set_shader_parameter("bg_%s_intensity_mult"%[im], 
 			$Level/Sphere.material_override.get_shader_parameter("bg_%s_intensity_mult"%[im]) * 2.2)
-	#update_colors()
 
 func _process(delta: float) -> void:
 	# update the level animations
@@ -25,12 +24,14 @@ func _process(delta: float) -> void:
 				if ring_rot_inv_dir: rot *= -1
 				(ring as Node3D).rotate_z((rot * delta) * (float(ring.get_index()+1)/5))
 
-func update_colors(left: Color, right: Color) -> void:
+func update_left_color(color: Color) -> void:
 	for i in [0,2,3]:
-		change_light_color(i,left)
+		change_light_color(i,color)
+
+func update_right_color(color: Color) -> void:
 	for i in [1,4]:
-		change_light_color(i,right)
-		
+		change_light_color(i,color)
+
 func set_all_off() -> void:
 	if not disabled:
 		for i in range(5):
@@ -41,8 +42,9 @@ func set_all_off() -> void:
 		$Level/rings.visible = false
 
 func set_all_on(left: Color, right: Color) -> void:
-		update_colors(left, right)
-		$Level/rings.visible = true
+	update_left_color(left)
+	update_right_color(right)
+	$Level/rings.visible = true
 
 func process_event(data: EventInfo, left: Color, right: Color) -> void:
 	if disabled: return
diff --git a/game/floor.gd b/game/floor.gd
index 12455a1..5750eba 100644
--- a/game/floor.gd
+++ b/game/floor.gd
@@ -20,11 +20,13 @@ func _ready() -> void:
 	material.albedo_texture = sub_viewport.get_texture()
 	material.emission_texture = sub_viewport.get_texture()
 
-func update_colors(COLOR_LEFT: Color, COLOR_RIGHT: Color) -> void:
-	C_LEFT = COLOR_LEFT
-	C_RIGHT = COLOR_RIGHT
-	burn_l.modulate = C_LEFT*6
-	burn_r.modulate = C_RIGHT*6
+func update_left_color(color: Color) -> void:
+	C_LEFT = color
+	burn_l.modulate = color*6
+
+func update_right_color(color: Color) -> void:
+	C_RIGHT = color
+	burn_r.modulate = color*6
 
 var left_is_out := false
 var right_is_out := false
diff --git a/game/settings_Panel.gd b/game/settings_Panel.gd
index aab158a..b27da5e 100644
--- a/game/settings_Panel.gd
+++ b/game/settings_Panel.gd
@@ -3,12 +3,7 @@ class_name SettingsPanel
 
 signal apply()
 
-@export var game: BeepSaber_Game
-@export var left_saber_ref: LightSaber
-@export var right_saber_ref: LightSaber
-@export var environment_ref: WorldEnvironment
 @export var player_ref: XROrigin3D
-@export var spectator_window_ref: Window
 
 @onready var saber_control := $ScrollContainer/VBox/SaberTypeRow/saber as OptionButton
 @onready var glare_control := $ScrollContainer/VBox/glare as CheckButton
@@ -46,13 +41,6 @@ var _play_ui_sound_demo := false
 func _ready() -> void:
 	UI_AudioEngine.attach_children(self)
 	
-	if OS.get_name() in ["Web"]:
-		#savedata.saber_tail = false
-		#savedata.cube_cuts_falloff = false
-		Settings.glare = false
-		#savedata.events = false
-		(game.get_node("StandingGround/SubViewport") as SubViewport).render_target_update_mode = SubViewport.UPDATE_DISABLED
-	
 	set_controls_from_settings()
 	_play_ui_sound_demo = true
 
@@ -103,46 +91,30 @@ func _restore_defaults() -> void:
 #settings down here
 func _on_thickness_value_changed(value: float) -> void:
 	Settings.thickness = value
-	left_saber_ref.set_thickness(value * 0.01)
-	right_saber_ref.set_thickness(value * 0.01)
 
 func _on_cut_blocks_toggled(button_pressed: bool) -> void:
 	Settings.cube_cuts_falloff = button_pressed
 
 func _on_left_saber_color_changed(color: Color) -> void:
 	Settings.color_left = color
-	game.set_colors_from_settings()
 
 func _on_right_saber_color_changed(color: Color) -> void:
 	Settings.color_right = color
-	game.set_colors_from_settings()
 
 func _on_saber_tail_toggled(button_pressed: bool) -> void:
 	Settings.saber_tail = button_pressed
-	left_saber_ref.set_trail(button_pressed)
-	right_saber_ref.set_trail(button_pressed)
 
 func _on_glare_toggled(button_pressed: bool) -> void:
 	Settings.glare = button_pressed
-	environment_ref.environment.glow_enabled = button_pressed
 
 func _on_d_background_toggled(button_pressed: bool) -> void:
 	Settings.events = button_pressed
-	game.disable_events(not button_pressed)
-	if OS.get_name() in ["Web"]:
-		game.event_driver.visible = button_pressed
 
 func _on_saber_item_selected(index: int) -> void:
 	Settings.saber_visual = index
-	left_saber_ref.set_saber(Settings.SABER_VISUALS[Settings.saber_visual][1])
-	right_saber_ref.set_saber(Settings.SABER_VISUALS[Settings.saber_visual][1])
-	await get_tree().process_frame
-	game.set_colors_from_settings()
-	_on_saber_tail_toggled(Settings.saber_tail)
 
 func _on_show_fps_toggled(button_pressed: bool) -> void:
 	Settings.show_fps = button_pressed
-	game.fps_label.visible = button_pressed
 
 func _on_bombs_enabled_toggled(button_pressed: bool) -> void:
 	Settings.bombs_enabled = button_pressed
@@ -156,55 +128,42 @@ func _on_ui_volume_slider_value_changed(value: float) -> void:
 
 func _on_left_saber_pos_x_changed(value: float) -> void:
 	Settings.left_saber_offset_pos.x = value
-	left_saber_ref.extra_offset_pos.x = value
 
 func _on_left_saber_pos_y_changed(value: float) -> void:
 	Settings.left_saber_offset_pos.y = value
-	left_saber_ref.extra_offset_pos.y = value
 
 func _on_left_saber_pos_z_changed(value: float) -> void:
 	Settings.left_saber_offset_pos.z = value
-	left_saber_ref.extra_offset_pos.z = value
 
 func _on_left_saber_rot_x_changed(value: float) -> void:
 	Settings.left_saber_offset_rot.x = value
-	left_saber_ref.extra_offset_rot.x = value
 
 func _on_left_saber_rot_y_changed(value: float) -> void:
 	Settings.left_saber_offset_rot.y = value
-	left_saber_ref.extra_offset_rot.y = value
 
 func _on_left_saber_rot_z_changed(value: float) -> void:
 	Settings.left_saber_offset_rot.z = value
-	left_saber_ref.extra_offset_rot.z = value
 
 func _on_right_saber_pos_x_changed(value: float) -> void:
 	Settings.right_saber_offset_pos.x = value
-	right_saber_ref.extra_offset_pos.x = value
 
 func _on_right_saber_pos_y_changed(value: float) -> void:
 	Settings.right_saber_offset_pos.y = value
-	right_saber_ref.extra_offset_pos.y = value
 
 func _on_right_saber_pos_z_changed(value: float) -> void:
 	Settings.right_saber_offset_pos.z = value
-	right_saber_ref.extra_offset_pos.z = value
 
 func _on_right_saber_rot_x_changed(value: float) -> void:
 	Settings.right_saber_offset_rot.x = value
-	right_saber_ref.extra_offset_rot.x = value
 
 func _on_right_saber_rot_y_changed(value: float) -> void:
 	Settings.right_saber_offset_rot.y = value
-	right_saber_ref.extra_offset_rot.y = value
 
 func _on_right_saber_rot_z_changed(value: float) -> void:
 	Settings.right_saber_offset_rot.z = value
-	right_saber_ref.extra_offset_rot.z = value
 
 func _on_player_height_offset_changed(value: float) -> void:
 	Settings.player_height_offset = value
-	player_ref.position.y = value
 
 func _on_disable_map_color_toggled(toggled_on: bool) -> void:
 	Settings.disable_map_color = toggled_on
@@ -250,4 +209,3 @@ func _on_sfx_slider_value_changed(value: float) -> void:
 
 func _on_spectator_view_toggled(value: bool) -> void:
 	Settings.spectator_view = value
-	spectator_window_ref.visible = value
